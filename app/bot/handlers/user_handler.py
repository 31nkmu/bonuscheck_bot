import functools
import io
import os
from typing import Optional

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
import logging
from aiogram.dispatcher.filters import Text
from asgiref.sync import sync_to_async, async_to_sync
from loguru import logger
from loguru._logger import Logger
from django.db import connection
import pandas as pd

from applications.users.models import UserRole
from bot.keyboards.keyboards import KeyboardManager
from interface.backend import BackendInterface
from interface.proverkacheka import ProverkachekaInterface


class FSM(StatesGroup):
    enter_code = State()
    send_check = State()
    admin_menu = State()
    give_bonus = State()
    take_withdraw = State()
    accept_output = State()


class BotHandler:
    __slots__ = "dp", "bot", "log", "bi", "kb", "pchi", "check_iter", "accrue_handler", "app_iter"

    def __init__(self,
                 dp: Dispatcher,
                 log: Logger,
                 bi: BackendInterface,
                 kb: KeyboardManager,
                 pchi: ProverkachekaInterface,
                 check_iter=None,
                 accrue_handler=None,
                 app_iter=None):
        self.dp = dp
        self.bot = dp.bot
        self.log = log
        self.bi = bi
        self.kb = kb
        self.pchi = pchi
        self.check_iter = check_iter
        self.accrue_handler = accrue_handler
        self.app_iter = app_iter

    def register_user_handlers(self):
        # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
        self.dp.register_message_handler(self.start, commands=['start'], state='*',
                                         role=[UserRole.USER, UserRole.ADMIN, UserRole.NOT_ACTIVE])
        self.dp.register_message_handler(self.admin, commands=['admin'], state='*', role=UserRole.ADMIN)
        self.dp.register_message_handler(self.enter_code, state=FSM.enter_code,
                                         role=[UserRole.USER, UserRole.ADMIN, UserRole.NOT_ACTIVE])

        self.dp.register_message_handler(self.admin_menu, state=FSM.admin_menu, content_types=types.ContentTypes.ANY,
                                         role=UserRole.ADMIN)
        self.dp.register_message_handler(self.send_check, state=FSM.send_check, content_types=types.ContentTypes.PHOTO,
                                         role=[UserRole.USER, UserRole.ADMIN])
        self.dp.register_message_handler(self.take_withdraw, state=FSM.take_withdraw,
                                         content_types=types.ContentTypes.ANY, role=[UserRole.USER, UserRole.ADMIN])

        self.dp.register_callback_query_handler(self.download_check, Text('download_check'), state='*',
                                                role=[UserRole.USER, UserRole.ADMIN])
        self.dp.register_callback_query_handler(self.personal_area, Text('personal_area'), state='*',
                                                role=[UserRole.USER, UserRole.ADMIN])
        self.dp.register_callback_query_handler(self.check_statistic, Text('check_statistic'), state='*',
                                                role=UserRole.ADMIN)
        self.dp.register_callback_query_handler(self.check_treatment, Text('check_treatment'), state='*',
                                                role=UserRole.ADMIN)
        self.dp.register_callback_query_handler(self.get_back, Text('get_back'), state='*',
                                                role=[UserRole.USER, UserRole.ADMIN])
        self.dp.register_callback_query_handler(self.accrue, Text('accrue'), state='*', role=UserRole.ADMIN)
        self.dp.register_callback_query_handler(self.reject, Text('reject'), state='*', role=UserRole.ADMIN)
        self.dp.register_callback_query_handler(self.get_back_admin, Text('get_back_admin'), state='*',
                                                role=UserRole.ADMIN)
        self.dp.register_callback_query_handler(self.withdraw_funds, Text('withdraw_funds'), state='*',
                                                role=[UserRole.USER, UserRole.ADMIN])
        self.dp.register_callback_query_handler(self.admin_withdraw_funds, Text('admin_withdraw_funds'), state='*',
                                                role=UserRole.ADMIN)
        self.dp.register_callback_query_handler(self.accrue_output, Text('accrue_output'), state='*',
                                                role=UserRole.ADMIN)
        self.dp.register_callback_query_handler(self.reject_output, Text('reject_output'), state='*',
                                                role=UserRole.ADMIN)
        self.dp.register_callback_query_handler(self.cancel_output, Text('cancel_output'), state='*',
                                                role=[UserRole.USER, UserRole.ADMIN])

    @staticmethod
    async def edit_page(message: Message,
                        new_text: str,
                        new_markup: Optional[types.InlineKeyboardMarkup] = None,
                        previous_markup_needed: bool = False):
        await message.edit_text(new_text)
        if not previous_markup_needed:
            await message.edit_reply_markup(new_markup)

    async def start(self, message: Message, state: FSMContext):
        await state.finish()
        text = "üëã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!"
        await self.bot.send_photo(chat_id=message.chat.id, caption=text,
                                  photo=types.InputFile('app/bot/media/test2.jpg'))
        user = await self.bi.get_user_with_code(tg_id=message.from_user.id)
        if user:
            success_code_kb = await self.kb.get_paid_kb()
            success_code_text = "–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω!"
            await self.bot.send_photo(chat_id=message.chat.id,
                                      photo=types.InputFile('app/bot/media/test2.jpg'),
                                      caption=success_code_text,
                                      reply_markup=success_code_kb)
            return
        await FSM.enter_code.set()
        text_email_code = 'üëá–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥'
        await self.bot.send_message(chat_id=message.chat.id, text=text_email_code)

    async def enter_code(self, message: types.Message, state: FSMContext):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–¥
        """
        message_to_delete = (await message.answer('‚åõ–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥. . .'))['message_id']
        try:
            code = await self.bi.get_code(message.text)
            if code:
                await state.finish()
                await self.bi.create_user(code=code, tg_id=message.from_user.id)
                success_code_kb = await self.kb.get_paid_kb()
                success_code_text = "–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω! \n –í—ã –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã"
                await self.bot.send_photo(chat_id=message.chat.id,
                                          photo=types.InputFile('app/bot/media/test2.jpg'),
                                          caption=success_code_text,
                                          reply_markup=success_code_kb)
            else:
                await self.bot.send_message(chat_id=message.chat.id,
                                            text="‚ùå–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                await FSM.enter_code.set()
                text_email_enter = 'üëá–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥'
                await message.bot.send_message(message.chat.id, text_email_enter)
        except Exception as err:
            await self.dp.bot.send_message(chat_id=message.chat.id,
                                           text="‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞.")
            logging.exception(err)
        finally:
            await self.bot.delete_message(chat_id=message.chat.id, message_id=message_to_delete)

    async def admin(self, message: Message, state: FSMContext):
        await state.finish()
        admin_text = '–í—ã –ø–æ–ø–∞–ª–∏ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
        kb = await self.kb.get_admin_kb()
        await self.bot.send_message(chat_id=message.chat.id, text=admin_text, reply_markup=kb)

    async def admin_menu(self, message: Message, state: FSMContext):
        await state.finish()
        kb = await self.kb.get_admin_kb()
        await self.bot.send_message(reply_markup=kb, chat_id=message.chat.id,
                                    text='–í–∞—à –≤—ã–±–æ—Ä')

    async def send_check(self, message: types.Message, state: FSMContext):
        """
        –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å —á–µ–∫–æ–º
        """
        message_to_delete = (await message.answer('‚åõ–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. . .'))['message_id']
        kb = await self.kb.get_back()
        try:
            await state.finish()
            photo = message.photo[-1]
            photo_binary = await photo.download(io.BytesIO())
            qr_raw, operation_type, product_list, code = await self.pchi.get_qr_by_photo(photo_binary)
            if code == 401:
                raise ValueError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω')
            if code == 1:
                # –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ
                have_codeword_products = await self.bi.get_have_codeword_products(product_list)
                is_have_qr = await self.bi.is_have_qr(qr_raw)
                if is_have_qr is True:
                    have_qr_text = 'qr code —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
                    await FSM.send_check.set()
                    await self.bot.send_message(chat_id=message.chat.id, text=have_qr_text, reply_markup=kb)
                    return
                if operation_type != 1:
                    find_not_operation_type = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —á–µ–∫–∞'
                    await FSM.send_check.set()
                    await self.bot.send_message(chat_id=message.chat.id, text=find_not_operation_type, reply_markup=kb)
                    return
                if len(have_codeword_products) == 0:
                    await self.bi.write_bad_qr_to_db(qr_raw=qr_raw, chat_id=message.from_user.id,
                                                     product_list=product_list)
                    find_not_qr_text = '–í qr code –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω—É–∂–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
                    await FSM.send_check.set()
                    await self.bot.send_message(chat_id=message.chat.id, text=find_not_qr_text, reply_markup=kb)
                else:
                    message_to_delete_bonus = (await message.answer('‚åõ–ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã. . .'))['message_id']
                    is_gave_bonus = await self.bi.give_bonus_write_qr(qr_raw=qr_raw, chat_id=message.from_user.id,
                                                                      product_list=product_list)
                    gave_bonus_text = '–ë–æ–Ω—É—Å—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω—ã,\n–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —á–µ–∫'
                    if is_gave_bonus is True:
                        await FSM.send_check.set()
                        await self.bot.send_message(chat_id=message.chat.id, text=gave_bonus_text, reply_markup=kb)
                    else:
                        find_not_qr_text = '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
                        await FSM.send_check.set()
                        await self.bot.send_message(chat_id=message.chat.id, text=find_not_qr_text, reply_markup=kb)
                    await self.bot.delete_message(chat_id=message.chat.id, message_id=message_to_delete_bonus)
            else:
                find_not_qr_text = '–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –Ω–∞ —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ qr code\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
                await FSM.send_check.set()
                await self.bot.send_message(chat_id=message.chat.id, text=find_not_qr_text, reply_markup=kb)
        except Exception as err:
            logging.exception(err)
            await FSM.send_check.set()
            await self.bot.send_message(chat_id=message.chat.id,
                                        text="‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ–∫–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=kb)
        finally:
            await self.bot.delete_message(chat_id=message.chat.id, message_id=message_to_delete)

    async def download_check(self, cb: CallbackQuery, state: FSMContext):
        """
        –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ '–ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–æ–≤'
        """
        await state.finish()
        await FSM.send_check.set()
        back_kb = await self.kb.get_back()
        await cb.bot.send_message(chat_id=cb.message.chat.id, text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å —á–µ–∫–æ–º', reply_markup=back_kb)

    async def personal_area(self, cb: CallbackQuery, state: FSMContext):
        """
        –ü–æ—è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'
        """
        await state.finish()

        personal_area_kb = await self.kb.get_personal_area_kb()
        user_obj = await self.bi.get_user(tg_id=cb.from_user.id)
        processed_count = await self.bi.get_processed_count(user_obj)
        accepted_count = await self.bi.get_accepted_count(user_obj)
        reject_count = await self.bi.get_reject_count(user_obj)
        code = await self.bi.get_keycode(user_obj)
        personal_data_text = f'–ë–∞–ª–∞–Ω—Å {user_obj.bonus_balance}\n' \
                             f'–ö–æ–¥ {code}\n' \
                             f'–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ  {processed_count}\n' \
                             f'–ü—Ä–∏–Ω—è—Ç—ã–µ {accepted_count}\n' \
                             f'–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ {reject_count}'
        await cb.bot.send_message(chat_id=cb.message.chat.id, reply_markup=personal_area_kb, text=personal_data_text)

    async def check_statistic(self, cb: CallbackQuery, state: FSMContext):
        """
        –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ–∫–æ–≤
        """
        await state.finish()
        await self.export_table_to_excel()
        await self.send_excel_file(cb.message.chat.id)
        await self.admin_menu(cb.message, state)

    async def check_treatment(self, cb: CallbackQuery, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–æ–≤`
        """
        await state.finish()
        accepted_check_list = await self.bi.get_all_accepted_qr()
        self.check_iter = iter(accepted_check_list)
        await self.process_next_check(cb)

    async def process_next_check(self, cb: CallbackQuery):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–µ–∫–∞
        """
        try:
            next_check = next(self.check_iter)
            kb = await self.kb.get_accepted_kb(next_check)
            # —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —á–µ–∫–∞
            res = await self.bi.get_products_text(next_check)

            await cb.message.answer(f'{res}', reply_markup=kb)
        except StopIteration:
            kb = await self.kb.get_admin_kb()
            await self.bot.send_message(chat_id=cb.message.chat.id, text='–í—Å–µ —á–µ–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã', reply_markup=kb)

    async def get_back(self, cb: CallbackQuery, state: FSMContext):
        await state.finish()
        kb = await self.kb.get_paid_kb()
        await cb.message.edit_reply_markup(reply_markup=kb)

    async def get_back_admin(self, cb: CallbackQuery, state: FSMContext):
        await state.finish()
        kb = await self.kb.get_admin_kb()
        await cb.message.edit_reply_markup(reply_markup=kb)

    @sync_to_async
    def export_table_to_excel(self):
        # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        with connection.cursor() as cursor:
            cursor.execute("""
                SELECT
                    uc.keycode as "code", uu.tg_id, uu.bonus_balance as "balance", 
                    ch_processed.qr_data as "qr code", p.name as "product name", p.price, p.quantity
                FROM
                    users_code uc
                JOIN
                    users_users uu ON uc.id = uu.code_id
                LEFT OUTER JOIN
                    users_check ch_processed ON uu.id = ch_processed.owner_id AND ch_processed.is_processed = true
                JOIN
                    users_product p ON ch_processed.id = p.check_field_id
            """)
            rows = cursor.fetchall()
            column_names = [desc[0] for desc in cursor.description]

        # –°–æ–∑–¥–∞—Ç—å DataFrame –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        df = pd.DataFrame(rows, columns=column_names)
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å DataFrame –≤ —Ñ–∞–π–ª Excel
        df.to_excel('–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ.xlsx', index=False)

        with connection.cursor() as cursor:
            cursor.execute("""
                SELECT
                    uc.keycode as "code", uu.tg_id, uu.bonus_balance as "balance", 
                    ch_processed.qr_data as "qr code", p.name as "product name", p.price, p.quantity
                FROM
                    users_code uc
                JOIN
                    users_users uu ON uc.id = uu.code_id
                LEFT OUTER JOIN
                    users_check ch_processed ON uu.id = ch_processed.owner_id AND ch_processed.is_reject = true
                JOIN
                    users_product p ON ch_processed.id = p.check_field_id
            """)
            rows = cursor.fetchall()
            column_names = [desc[0] for desc in cursor.description]

        # –°–æ–∑–¥–∞—Ç—å DataFrame –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        df = pd.DataFrame(rows, columns=column_names)
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å DataFrame –≤ —Ñ–∞–π–ª Excel
        df.to_excel('–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ.xlsx', index=False)

        with connection.cursor() as cursor:
            cursor.execute("""
                SELECT
                    uc.keycode as "code", uu.tg_id, uu.bonus_balance as "balance", 
                    ch_processed.qr_data as "qr code", p.name as "product name", p.price, p.quantity
                FROM
                    users_code uc
                JOIN
                    users_users uu ON uc.id = uu.code_id
                LEFT OUTER JOIN
                    users_check ch_processed ON uu.id = ch_processed.owner_id AND ch_processed.is_accepted = true
                JOIN
                    users_product p ON ch_processed.id = p.check_field_id
            """)
            rows = cursor.fetchall()
            column_names = [desc[0] for desc in cursor.description]

        # –°–æ–∑–¥–∞—Ç—å DataFrame –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        df = pd.DataFrame(rows, columns=column_names)
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å DataFrame –≤ —Ñ–∞–π–ª Excel
        df.to_excel('–ü—Ä–∏–Ω—è—Ç—ã–µ.xlsx', index=False)

    async def send_excel_file(self, chat_id):
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª Excel –≤ Telegram
        with open('–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ.xlsx', 'rb') as file:
            await self.dp.bot.send_document(chat_id, file)

        with open('–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ.xlsx', 'rb') as file:
            await self.dp.bot.send_document(chat_id, file)

        with open('–ü—Ä–∏–Ω—è—Ç—ã–µ.xlsx', 'rb') as file:
            await self.dp.bot.send_document(chat_id, file)

        # –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        os.remove('–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ.xlsx')
        os.remove('–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ.xlsx')
        os.remove('–ü—Ä–∏–Ω—è—Ç—ã–µ.xlsx')

    async def accrue(self, cb: CallbackQuery, state: FSMContext):
        """
        –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–µ–∫–æ–≤
        """
        await state.finish()
        accepted_check = cb.message.text
        await self.bot.send_message(chat_id=cb.message.chat.id, text=accepted_check)
        if self.accrue_handler is not None:
            self.dp.message_handlers.unregister(self.accrue_handler)
        self.accrue_handler = functools.partial(self.give_bonus, cb=cb, check=accepted_check)
        self.dp.register_message_handler(self.accrue_handler, state=FSM.give_bonus,
                                         content_types=types.ContentTypes.TEXT)
        await FSM.give_bonus.set()
        await self.bot.send_message(chat_id=cb.message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –±–∞–ª–∞–Ω—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∏—Å–ª–∏—Ç—å')

    async def give_bonus(self, message: types.Message, state: FSMContext, cb: CallbackQuery, check):
        await state.finish()
        check = cb.message.text.split('\n')[-1].split(' ')[-1]
        await self.bot.send_message(chat_id=message.chat.id, text=f'–¥–∞–µ–º –±–æ–Ω—É—Å {check}, {message.text}')
        try:
            await self.bi.write_bonus_accepted_qr(qr_row=check, bonus=int(message.text))
        except ValueError:
            await self.bot.send_message(chat_id=message.chat.id, text='–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ')
        await self.process_next_check(cb)

    async def reject(self, cb: CallbackQuery, state: FSMContext):
        await state.finish()
        accepted_check = cb.message.text.split('\n')[-1].split(' ')[-1]
        await self.bi.reject_qr(qr_row=accepted_check)
        await self.bot.send_message(chat_id=cb.message.chat.id, text=f'—á–µ–∫ {accepted_check} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω')
        await self.process_next_check(cb)

    async def withdraw_funds(self, cb: CallbackQuery, state: FSMContext):
        """
        –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤
        """
        await state.finish()
        kb = await self.kb.get_back()
        await FSM.take_withdraw.set()
        await self.bot.send_message(cb.message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏',
                                    reply_markup=kb)

    async def take_withdraw(self, message: types.Message, state: FSMContext):
        """
        –ü—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤
        """
        balance = float(message.text)
        user_obj = await self.bi.get_user(message.from_user.id)
        min_balance_to_output = await self.bi.get_min_balance_to_output()
        if balance < min_balance_to_output:
            kb = await self.kb.get_back()
            invalid_balance_text = f'–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –º–µ–Ω—å—à–µ {min_balance_to_output}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞'
            await FSM.take_withdraw.set()
            await self.bot.send_message(message.chat.id, text=invalid_balance_text, reply_markup=kb)
            return
        if balance > user_obj.bonus_balance:
            kb = await self.kb.get_back()
            invalid_balance_text = f'–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –±–æ–ª—å—à–µ {user_obj.bonus_balance}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞'
            await FSM.take_withdraw.set()
            await self.bot.send_message(message.chat.id, text=invalid_balance_text, reply_markup=kb)
            return
        user_obj = await self.bi.get_user(message.from_user.id)
        is_created = await self.bi.create_output(tg_id=user_obj, balance=balance)
        if is_created is True:
            is_created_text = '–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–≤–æ–¥–µ –±–æ–Ω—É—Å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É'
            text_to_admin = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_obj.tg_id} —Ö–æ—á–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ {balance}\n' \
                            f'–ï–≥–æ –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {user_obj.bonus_balance}'
            kb = await self.kb.get_personal_area_kb()
            await self.send_messages_to_admin(text_to_admin)
            await self.bot.send_message(message.chat.id, is_created_text, reply_markup=kb)
        elif is_created == 'have_output':
            is_have_output_text = '–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥'
            kb = await self.kb.get_personal_area_kb()
            await self.bot.send_message(message.chat.id, is_have_output_text, reply_markup=kb)
        else:
            not_created_text = '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–≤–µ–¥–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∑–∞–Ω–æ–≤–æ'
            kb = await self.kb.get_back()
            await FSM.take_withdraw.set()
            await self.bot.send_message(message.from_user.id, not_created_text, reply_markup=kb)

    @sync_to_async
    def send_messages_to_admin(self, msg):
        admin_list = self.bi.get_all_admin_tg_id()
        for tg_id in admin_list:
            async_to_sync(self.bot.send_message)(tg_id, msg)

    async def admin_withdraw_funds(self, cb: CallbackQuery, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥
        """
        await state.finish()
        processing_app_list = await self.bi.get_all_processing_app()
        self.app_iter = iter(processing_app_list)
        await self.process_next_fund(cb)

    async def process_next_fund(self, cb: CallbackQuery):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
        """
        try:
            next_app = next(self.app_iter)
            kb = await self.kb.get_processing_fund_kb()
            owner, amount, balance = await self.bi.get_split_data(next_app)
            await cb.message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {owner}\n–ù–∞ –≤—ã–≤–æ–¥: {amount}\n–ë–∞–ª–∞–Ω—Å: {balance}',
                                    reply_markup=kb)
        except StopIteration:
            kb = await self.kb.get_admin_kb()
            await self.bot.send_message(chat_id=cb.message.chat.id, text='–í—Å–µ –∑–∞—è–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã', reply_markup=kb)

    async def accrue_output(self, cb: CallbackQuery, state: FSMContext):
        """
        –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—ã–≤–æ–¥ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        await state.finish()
        accepted_output = cb.message.text.split('\n')
        owner = accepted_output[0].replace(' ', '').split(':')[-1]
        amount = accepted_output[1].replace(' ', '').split(':')[-1]
        is_accrued_output = await self.bi.accrue_output(owner=owner, amount=amount)
        if is_accrued_output is True:
            accrued_text = '–í—ã–≤–æ–¥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç'
            await self.bot.send_message(chat_id=cb.message.chat.id, text=accrued_text)
            await self.bot.send_message(chat_id=owner, text=f'–í–∞—à –≤—ã–≤–æ–¥ –Ω–∞ —Å—É–º–º—É {amount} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç')
            await self.process_next_fund(cb)
        else:
            error_text = '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
            await self.bot.send_message(chat_id=cb.message.chat.id, text=error_text)

    async def reject_output(self, cb: CallbackQuery, state: FSMContext):
        await state.finish()
        accepted_output = cb.message.text.split('\n')
        owner = accepted_output[0].replace(' ', '').split(':')[-1]
        amount = accepted_output[1].replace(' ', '').split(':')[-1]
        await self.bi.reject_output(owner=owner, amount=amount)
        await self.bot.send_message(chat_id=cb.message.chat.id,
                                    text=f'–í–æ–∑–≤—Ä–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {owner} –Ω–∞ —Å—É–º–º—É {amount} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω')
        await self.bot.send_message(chat_id=owner, text=f'–í–∞—à –≤—ã–≤–æ–¥ –Ω–∞ —Å—É–º–º—É {amount} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω')
        await self.process_next_fund(cb)

    async def cancel_output(self, cb: CallbackQuery, state: FSMContext):
        await state.finish()
        is_deleted = await self.bi.del_output(tg_id=cb.from_user.id)
        kb = await self.kb.get_personal_area_kb()
        if is_deleted is True:
            deleted_output_text = '–í–∞—à –≤—ã–≤–æ–¥ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω'
            await self.bot.send_message(cb.message.chat.id, deleted_output_text, reply_markup=kb)
            return
        have_not_output_text = '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥'
        await self.bot.send_message(cb.message.chat.id, have_not_output_text, reply_markup=kb)
